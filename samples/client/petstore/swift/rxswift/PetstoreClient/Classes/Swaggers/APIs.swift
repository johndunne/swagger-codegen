// APIs.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

<<<<<<< HEAD
open class PetstoreClientAPI {
    open static var basePath = "http://petstore.swagger.io/v2"
    open static var credential: URLCredential?
    open static var customHeaders: [String:String] = [:]
=======
public class PetstoreClientAPI {
    public static var basePath = "http://petstore.swagger.io/v2"
    public static var credential: NSURLCredential?
    public static var customHeaders: [String:String] = [:]  
>>>>>>> upstream/master
    static var requestBuilderFactory: RequestBuilderFactory = AlamofireRequestBuilderFactory()
}

open class APIBase {
    func toParameters(_ encodable: JSONEncodable?) -> [String: Any]? {
        let encoded: Any? = encodable?.encodeToJSON()

        if encoded! is [Any] {
            var dictionary = [String:Any]()
            for (index, item) in (encoded as! [Any]).enumerated() {
                dictionary["\(index)"] = item
            }
            return dictionary
        } else {
            return encoded as? [String:Any]
        }
    }
}

open class RequestBuilder<T> {
    var credential: URLCredential?
    var headers: [String:String] = [:]
    let parameters: [String:Any]?
    let isBody: Bool
    let method: String
    let URLString: String
    
    /// Optional block to obtain a reference to the request's progress instance when available.
    public var onProgressReady: ((Progress) -> ())?

    required public init(method: String, URLString: String, parameters: [String:Any]?, isBody: Bool) {
        self.method = method
        self.URLString = URLString
        self.parameters = parameters
        self.isBody = isBody
        
        addHeaders(PetstoreClientAPI.customHeaders)
    }
    
<<<<<<< HEAD
    open func addHeaders(_ aHeaders:[String:String]) {
=======
    public func addHeaders(aHeaders:[String:String]) {
>>>>>>> upstream/master
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }
    
<<<<<<< HEAD
    open func execute(_ completion: @escaping (_ response: Response<T>?, _ error: Error?) -> Void) { }

    public func addHeader(name: String, value: String) -> Self {
=======
    public func execute(completion: (response: Response<T>?, error: ErrorType?) -> Void) { }

    public func addHeader(name name: String, value: String) -> Self {
>>>>>>> upstream/master
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }
    
<<<<<<< HEAD
    open func addCredential() -> Self {
=======
    public func addCredential() -> Self {
>>>>>>> upstream/master
        self.credential = PetstoreClientAPI.credential
        return self
    }
}

protocol RequestBuilderFactory {
    func getBuilder<T>() -> RequestBuilder<T>.Type
}

