package api

/**
* Generated automatically from swagger-codegen. Don't edit here! There's no point :)
*  hasAuthMethods: {{hasAuthMethods}}
*  authMethods: {{authMethods}}
*
**/

import (
        "net/http"
        "fmt"
        "github.com/gorilla/mux"
        "github.com/urfave/negroni"
        "github.com/justinas/alice"
        "quickflickserver/controllers"{{#hasAuthMethods}}
        "quickflickserver/apiauth"{{/hasAuthMethods}}
        "errors"
)

type linkedHandler func(inner http.Handler) http.Handler

type Route struct {
	Name        string
	Method      string
	Pattern     string
    Chain		alice.Chain
    HandlerFunc http.HandlerFunc
}

type Routes []Route

func RunApiServer( bind_address string ) *negroni.Negroni {
        if runningNegroni == nil{
            runningNegroni = NewUninitialisedRouter()
        }
        router := mux.NewRouter().StrictSlash(true)
        for _, route := range routes {
                h := http.HandlerFunc(route.HandlerFunc)

                router.
                Methods(route.Method).
                    Path(route.Pattern).
                    Name(route.Name).
                    Handler( route.Chain.Then(h) )
        }
        //n := negroni.New(NewRecovery(), NewLogger(), NewStatic(http.Dir("public")))

        //n.Use(negroni.Recovery)
        //n.Use(negroni.Logger)
        //n.Use(negroni.Static)
        runningNegroni.UseHandler(router)
        runningNegroni.Run(bind_address)
        return runningNegroni
}

var runningNegroni *negroni.Negroni

func NewUninitialisedRouter() *negroni.Negroni {
	if runningNegroni!=nil{
		panic(errors.New("There's already a server running"))
	}
	runningNegroni = negroni.New()
	CreateModelsInDB()
	return runningNegroni
}


func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

//func MyMiddleware(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
//    // do some stuff before
//    next(rw, r)
//    // do some stuff after
//}
func AddRoute(route Route){
    routes = append(routes,route)
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"{{basePathWithoutHost}}/",
        alice.New(),
		Index,
	},
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    /* {{#authMethods}}
        name : {{name}} type : {{type}}
        *  isBasic: {{isBasic}}, isOAuth: {{isOAuth}}, isApiKey {{isApiKey}}
        *  OAuth specific -> flow :{{flow}}, authorizationUrl: {{authorizationUrl}}, tokenUrl: {{tokenUrl}}
        scopes: {{scopes}}
        {{#scopes}}
            {{scope}} -> {{description}}
        {{/scopes}}
        isCode:{{isCode}}, isPassword:{{isPassword}}, isApplication:{{isApplication}}, isImplicit:{{isImplicit}}
        isKeyInQuery:{{isKeyInQuery}}, isKeyInHeader:{{isKeyInHeader}}
    {{/authMethods}}
        */

    Route{ // {{authMethods}} {{security}}
		"{{operationId}}",
		"{{httpMethod}}",
		"{{basePathWithoutHost}}{{path}}",
    alice.New( {{#hasAuthMethods}}{{#authMethods}}{{#scopes}}  apiauth.ApiAuth{{scope}} {{^-last}},{{/-last}}{{/scopes}}{{/authMethods}} {{/hasAuthMethods}} ),
        controllers.{{operationId}},
	},
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}